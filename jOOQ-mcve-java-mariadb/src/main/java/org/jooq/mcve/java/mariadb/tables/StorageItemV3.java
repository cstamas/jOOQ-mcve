/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.mariadb.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.mariadb.Indexes;
import org.jooq.mcve.java.mariadb.Keys;
import org.jooq.mcve.java.mariadb.Mcve;
import org.jooq.mcve.java.mariadb.tables.records.StorageItemV3Record;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StorageItemV3 extends TableImpl<StorageItemV3Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mcve.storage_item_v3</code>
     */
    public static final StorageItemV3 STORAGE_ITEM_V3 = new StorageItemV3();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StorageItemV3Record> getRecordType() {
        return StorageItemV3Record.class;
    }

    /**
     * The column <code>mcve.storage_item_v3.itemKey</code>.
     */
    public final TableField<StorageItemV3Record, String> ITEMKEY = createField(DSL.name("itemKey"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>mcve.storage_item_v3.parentKey</code>.
     */
    public final TableField<StorageItemV3Record, String> PARENTKEY = createField(DSL.name("parentKey"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>mcve.storage_item_v3.providerKey</code>.
     */
    public final TableField<StorageItemV3Record, String> PROVIDERKEY = createField(DSL.name("providerKey"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>mcve.storage_item_v3.version</code>.
     */
    public final TableField<StorageItemV3Record, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>mcve.storage_item_v3.container</code>.
     */
    public final TableField<StorageItemV3Record, String> CONTAINER = createField(DSL.name("container"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>mcve.storage_item_v3.path</code>.
     */
    public final TableField<StorageItemV3Record, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR(4096).nullable(false), this, "");

    /**
     * The column <code>mcve.storage_item_v3.contentSize</code>.
     */
    public final TableField<StorageItemV3Record, Long> CONTENTSIZE = createField(DSL.name("contentSize"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>mcve.storage_item_v3.contentId</code>.
     */
    public final TableField<StorageItemV3Record, String> CONTENTID = createField(DSL.name("contentId"), SQLDataType.VARCHAR(5000), this, "");

    /**
     * The column <code>mcve.storage_item_v3.itemType</code>.
     */
    public final TableField<StorageItemV3Record, String> ITEMTYPE = createField(DSL.name("itemType"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>mcve.storage_item_v3.metadata</code>.
     */
    public final TableField<StorageItemV3Record, String> METADATA = createField(DSL.name("metadata"), SQLDataType.CLOB.nullable(false), this, "");

    private StorageItemV3(Name alias, Table<StorageItemV3Record> aliased) {
        this(alias, aliased, null);
    }

    private StorageItemV3(Name alias, Table<StorageItemV3Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mcve.storage_item_v3</code> table reference
     */
    public StorageItemV3(String alias) {
        this(DSL.name(alias), STORAGE_ITEM_V3);
    }

    /**
     * Create an aliased <code>mcve.storage_item_v3</code> table reference
     */
    public StorageItemV3(Name alias) {
        this(alias, STORAGE_ITEM_V3);
    }

    /**
     * Create a <code>mcve.storage_item_v3</code> table reference
     */
    public StorageItemV3() {
        this(DSL.name("storage_item_v3"), null);
    }

    public <O extends Record> StorageItemV3(Table<O> child, ForeignKey<O, StorageItemV3Record> key) {
        super(child, key, STORAGE_ITEM_V3);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STORAGE_ITEM_V3_STORAGE_ITEM_V3_PARENTKEY);
    }

    @Override
    public UniqueKey<StorageItemV3Record> getPrimaryKey() {
        return Keys.KEY_STORAGE_ITEM_V3_PRIMARY;
    }

    @Override
    public StorageItemV3 as(String alias) {
        return new StorageItemV3(DSL.name(alias), this);
    }

    @Override
    public StorageItemV3 as(Name alias) {
        return new StorageItemV3(alias, this);
    }

    @Override
    public StorageItemV3 as(Table<?> alias) {
        return new StorageItemV3(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StorageItemV3 rename(String name) {
        return new StorageItemV3(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StorageItemV3 rename(Name name) {
        return new StorageItemV3(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StorageItemV3 rename(Table<?> name) {
        return new StorageItemV3(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<String, String, String, String, String, String, Long, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
